// E-commerce Platform - Prisma Schema
// Database: PostgreSQL
// ORM: Prisma 6.x

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// User Management
// ============================================

model User {
  id                   String    @id @default(cuid())
  email                String    @unique
  emailVerified        DateTime?
  name                 String?
  passwordHash         String?
  role                 Role      @default(CUSTOMER)
  avatarUrl            String?
  twoFactorEnabled     Boolean   @default(false)
  failedLoginAttempts  Int       @default(0)
  lockedUntil          DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  deletedAt            DateTime?

  // Relations
  addresses            Address[]
  orders               Order[]
  reviews              Review[]
  cart                 Cart?

  @@index([email])
  @@map("users")
}

enum Role {
  CUSTOMER
  ADMIN
  SUPPORT
  INVENTORY_MANAGER
}

// ============================================
// Product Catalog
// ============================================

model Category {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique
  description String?
  imageUrl    String?
  sortOrder   Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Self-relation for hierarchy
  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  parentId    String?
  children    Category[] @relation("CategoryToCategory")

  // Products in category
  products    Product[]

  @@index([slug])
  @@index([parentId])
  @@map("categories")
}

model Product {
  id                String          @id @default(cuid())
  sku               String          @unique
  name              String
  slug              String          @unique
  description       String?
  shortDescription  String?
  price             Decimal         @db.Decimal(10, 2)
  compareAtPrice    Decimal?        @db.Decimal(10, 2)
  costPrice         Decimal?        @db.Decimal(10, 2)
  status            ProductStatus   @default(DRAFT)
  featured          Boolean         @default(false)
  seoTitle          String?
  seoDescription    String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  deletedAt         DateTime?

  // Relations
  category          Category?       @relation(fields: [categoryId], references: [id])
  categoryId        String?
  images            ProductImage[]
  inventory         Inventory?
  reviews           Review[]
  cartItems         CartItem[]
  orderItems        OrderItem[]

  @@index([slug])
  @@index([status])
  @@index([categoryId])
  @@map("products")
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  altText   String?
  sortOrder Int      @default(0)
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())

  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@map("product_images")
}

model Inventory {
  id                String   @id @default(cuid())
  productId         String   @unique
  quantity          Int      @default(0)
  reservedQuantity  Int      @default(0)
  lowStockThreshold Int      @default(10)
  updatedAt         DateTime @updatedAt

  product           Product  @relation(fields: [productId], references: [id])

  @@index([productId])
  @@map("inventory")
}

// ============================================
// Shopping Cart
// ============================================

model Cart {
  id        String     @id @default(cuid())
  userId    String?    @unique
  sessionId String?    @unique
  expiresAt DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user      User?      @relation(fields: [userId], references: [id])
  items     CartItem[]

  @@index([userId])
  @@index([sessionId])
  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@index([cartId])
  @@index([productId])
  @@map("cart_items")
}

// ============================================
// Orders & Payments
// ============================================

model Order {
  id                 String       @id @default(cuid())
  orderNumber        String       @unique
  userId             String?
  guestEmail         String?
  status             OrderStatus  @default(PENDING_PAYMENT)
  subtotal           Decimal      @db.Decimal(10, 2)
  shippingCost       Decimal      @db.Decimal(10, 2)
  taxAmount          Decimal      @db.Decimal(10, 2)
  discountAmount     Decimal      @db.Decimal(10, 2) @default(0)
  total              Decimal      @db.Decimal(10, 2)
  paymentIntentId    String?
  trackingNumber     String?
  notes              String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  user               User?        @relation(fields: [userId], references: [id])
  items              OrderItem[]
  shippingAddress    Address      @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  shippingAddressId  String
  billingAddress     Address      @relation("BillingAddress", fields: [billingAddressId], references: [id])
  billingAddressId   String
  payment            Payment?

  @@index([userId])
  @@index([orderNumber])
  @@index([status])
  @@map("orders")
}

enum OrderStatus {
  PENDING_PAYMENT
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  productId   String
  productName String
  productSku  String
  quantity    Int
  unitPrice   Decimal  @db.Decimal(10, 2)
  totalPrice  Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())

  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model Address {
  id           String      @id @default(cuid())
  userId       String
  type         AddressType
  firstName    String
  lastName     String
  addressLine1 String
  addressLine2 String?
  city         String
  state        String?
  postalCode   String
  country      String
  phoneNumber  String?
  isDefault    Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingOrders   Order[] @relation("ShippingAddress")
  billingOrders    Order[] @relation("BillingAddress")

  @@index([userId])
  @@map("addresses")
}

enum AddressType {
  SHIPPING
  BILLING
}

model Payment {
  id                     String        @id @default(cuid())
  orderId                String        @unique
  stripePaymentIntentId  String        @unique
  amount                 Decimal       @db.Decimal(10, 2)
  status                 PaymentStatus
  paymentMethod          String?
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt

  order                  Order         @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([stripePaymentIntentId])
  @@map("payments")
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELLED
  REFUNDED
}

// ============================================
// Reviews & Ratings
// ============================================

model Review {
  id               String       @id @default(cuid())
  productId        String
  userId           String
  orderId          String?
  rating           Int // 1-5
  title            String?
  comment          String?
  images           String[]
  verifiedPurchase Boolean      @default(false)
  status           ReviewStatus @default(PENDING)
  helpfulCount     Int          @default(0)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  product          Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  user             User         @relation(fields: [userId], references: [id])
  votes            ReviewVote[]

  @@index([productId])
  @@index([userId])
  @@index([status])
  @@map("reviews")
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

model ReviewVote {
  id        String   @id @default(cuid())
  reviewId  String
  userId    String
  voteType  VoteType
  createdAt DateTime @default(now())

  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@unique([reviewId, userId])
  @@index([reviewId])
  @@map("review_votes")
}

enum VoteType {
  HELPFUL
  NOT_HELPFUL
}
